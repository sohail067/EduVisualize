good day everyone my name is Mohammed Sohail today I'll be discussing some problems with multithreading in Java before going to the problems we have some terminologies to know first is program program is a set of instructions that tells a computer what to do example MS Word is a program that allows you to create and edit documents nextly we have thread thread is a single sequence instructions that can be executed independently of other instructions for example a browser may have one thread that handle user input and another trade that Load images in the background nextly we have multithreading multi threading is ability of a program or OS to support multiple Threads of execution simultaneously example a video player might use one thread to decode the video and other trade to display it on the screen allowing both task to happen at the same time now with this let's move to the problem arise when we use multi threading concept in Java first is synchronisation overhead synchronisation overhead occurs the computer system when multiple Threads or processes access resources and need to co-ordinate with each other to avoid conflicts when Real world example with synchronisation overhead can occur is in a banking application that allows multiple user to access their account simultaneously in such an application each account is the state result that must be accessed and updated by multiple Threads concurrently it's not properly manage it is possible for two or more than access and update the same account balance simultaneously this can result in Race condition and other synchronisation issues to avoid this issues the application must use appropriate synchronisation mechanism such as loss of ensure that only one thread can access give an account of
moving to the next problem it is race condition race condition is a phenomena that occurs in computer programs when multiple threats access shared resources and manipulate data simultaneously leading to unexpected results now consider a scenario with two users are trying to book the same seat at the same time if both request are process simultaneously a race condition can occur for example for Threads read the current number of available seats and find that there is only one seat left then try to put the seat assuming that it is still available resulting in two users being assigned to same sheet causing an inconsistency to avoid this you can use synchronisation technique like locks semaphore atomic operations to ensure that only one thread can access the state
why this moving to the next problem it is starvation starvation is a problem that can occur in multithreading thread is unable to acquire a shared resource or enter a critical section indefinitely here is a real life example of starvation in multithreading imagine a scenario where multiple Threads of execution represent the staff and customer who want to print their orders or receipt simultaneously if one of the trade continuously half the printer it can lead to starvation of other Threads that requires to access the printer for instance the thread representing the customer may keep acquiring the printer according the thread representing the staff to wait indefinitely unable to print their order to avoid starvation you can implement in techniques such as priority scheduling where high priority Threads are given preference to acquire state resources
Nestle we have deadlocks a deadlock is a situation that can occur in computer system when two or more processes a waiting for each other to release resources resulting in a stand still when no progress can be made Real world example of this can be seen in the occurrence of gridlock in traffic when vehicles at intersection are unable to move forward due to obstruction caused by other vehicles IT results in a deadlock is driver is waiting for the order to move first but since none of them can move traffic come to a standstill similarly in computer systems A deadlock can occur when two or more processors are waiting for each other to release resources they need to complete the task this can result in a standstill and none of the processes can continue until the deadlock is resolved to prevent deadlock in a computer system programs use techniques such as deadlock avoidance and deadlock detection problem arises when we deal with the concept of multi threading in Java thank